Data Binding

Data-binding in Angular apps is the automatic synchronization of data between the model and view components.
The way that Angular implements data-binding lets you treat the model as the single-source-of-truth in your application.
The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.

Data Model
AngularJS applications usually have a data model. The data model is a collection of data available for the application.

Example:
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});

HTML View
The HTML container where the AngularJS application is displayed, is called the view.

The view has access to the model, and there are several ways of displaying model data in the view.

You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:

Example:
<p ng-bind="firstname"></p>

You can also use double braces {{ }} to display content from the model:

<p>First name: {{firstname}}</p>

Or you can use the ng-model directive on HTML controls to bind the model to the view.

<input ng-model="firstname">

The ng-model directive provides a two-way binding between the model and the view.

Two-way Binding
Data binding in AngularJS is the synchronization between the model and the view.

When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well.
This happens immediately and automatically, which makes sure that the model and the view is updated at all times.

Example:
<div ng-app="myApp" ng-controller="myCtrl">
    Name: <input ng-model="firstname">
    <h1>{{firstname}}</h1>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
    $scope.firstname = "John";
    $scope.lastname = "Doe";
});
</script>