<lesson>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Introduction
        </title>
        <content>
            &lt;h2>What is AngularJS?&lt;/h2>

            AngularJS is a structural framework for dynamic web apps.It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. Angular's data binding and dependency injection eliminate much of the code you would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.

            Angular is what HTML would have been, had it been designed for applications.

            Try running the sample code on our Code Editor.

            &lt;h3>Code Explanation:&lt;/h3>

            The controller creates two properties (variables) in the scope (firstName and lastName).

            The &lt;strong>ng-bind&lt;/strong> directive binds the innerHTML of the h1 element to the application variable firstName and lastName.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h1 ng-bind="firstName"></h1>
                    /tb1 <h1 ng-bind="lastName"></h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function ($scope) {
                    /tb1 $scope.firstName = 'John';
                    /tb1 $scope.lastName = 'Doe';
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h1 ng-bind="firstName"></h1>
                    /tb1 <h1 ng-bind="lastName"></h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function ($scope) {
                    /tb1 $scope.firstName = 'John';
                    /tb1 $scope.lastName = 'Doe';
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Directives
        </title>
        <content>
            At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.

            Angular comes with a set of these directives built-in, like ngBind, ngModel, and ngClass.

            AngularJS directives are extended HTML attributes with the prefix ng-.

            The &lt;strong>ng-app&lt;/strong> directive initializes an AngularJS application.

            The &lt;strong>ng-init&lt;/strong> directive initializes application data.

            The &lt;strong>ng-model&lt;/strong> directive binds the value of HTML controls (input, select, textarea) to application data.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="" ng-init="firstName='John'">
                /nl
                /tb1 /ltp>Name: /ltinput type="text" ng-model="firstName">/lt/p>
                /tb1 /ltp>You wrote: {{ firstName }}/lt/p>
                /nl    
                /lt/div>
            &lt;/code>&lt;/pre>
            &lt;h2>Repeating HTML Elements&lt;/h2>

            The &lt;strong>ng-repeat&lt;/strong> directive repeats an HTML element.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="" ng-init="names=['Jani','Hege','Kai']">
                /tb1 /ltul>
                /tb2 /ltli ng-repeat="x in names">
                /tb3 {{ x }}
                /tb2 /lt/li>
                /tb1 /lt/ul>
                /lt/div>
            &lt;/code>&lt;/pre>
            You can create your own custom directive using the angular &lt;strong>directive()&lt;/strong> function.

            &lt;h3>Exercise:&lt;/h3>

            1. Try to supply the missing Directives on the example on our Code Editor. When you're done you'll have a text input and anything that you type on it will be shown below it.
        
            2. Try to output at least five names using ng-repeat directive.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="">
                    /tb1 Exercise 1
                    /tb1 <div>
                    /tb2 <p>Name: <input type="text"></p>
                    /tb2 <p>You wrote: {{ firstName }}</p>
                    /tb1 </div>
                    
                    /tb1 Exercise 2
                    /tb1 <div ng-init="">
                    /tb2 <ul>
                    /tb3 <li></li>
                    /tb2 </ul>
                    /tb1 </div>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="">
                    /tb1 Exercise 1
                    /tb1 <div ng-init="firstName = 'John'">
                    /tb2 <p>Name: <input type="text" ng-model="firstName"></p>
                    /tb2 <p>You wrote: {{ firstName }}</p>
                    /tb1 </div>
                    
                    /tb1 Exercise 2
                    /tb1 <div ng-init="names=['Peter','Sebastian','Erika','Patrick','Samantha']">
                    /tb2 <ul>
                    /tb3 <li ng-repeat="x in names">{{x}}</li>
                    /tb2 </ul>
                    /tb1 </div>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Expressions
        </title>
        <content>
            Angular expressions are JavaScript-like code snippets that are mainly placed in interpolation bindings.

            AngularJS expressions can be written inside double braces: {{ expression }}.

            AngularJS expressions can also be written inside a directive: ng-bind="expression".

            AngularJS will resolve the expression, and return the result exactly where the expression is written.

            AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="">
                    /nl
                    Numbers
                    /ltdiv ng-init="quantity=1;cost=5">
                    /nl
                    /tb1 /ltp>Total in dollar: /ltspan ng-bind="quantity * cost">/lt/span>/lt/p>
                    /nl
                    /lt/div>
                    /nl
                    Strings
                    /ltdiv ng-init="firstName='John';lastName='Doe'">
                    /nl
                    /tb1 /ltp>The name is {{ firstName + " " + lastName }}/lt/p>
                    /nl
                    /lt/div>
                    /nl
                    Objects
                    /ltdiv ng-init="person={firstName:'John',lastName:'Doe'}">
                    /nl
                    /tb1 /ltp>The name is {{ person.lastName }}/lt/p>
                    /nl
                    /lt/div>
                    /nl
                    Arrays
                    /ltdiv ng-init="points=[1,15,19,2,40]">
                    /nl
                    /tb1 /ltp>The third result is {{ points[2] }}/lt/p>
                    /nl
                    /lt/div>
                    /nl
                /lt/div>
            &lt;/code>&lt;/pre>
            &lt;h2>One-time binding&lt;/h2>

            An expression that starts with :: is considered a one-time expression. One-time expressions will stop recalculating once they are stable, which happens after the first digest if the expression result is a non-undefined value.

            &lt;h2>Reasons for using one-time binding&lt;/h2>

            The main purpose of one-time binding expression is to provide a way to create a binding that gets deregistered and frees up resources once the binding is stabilized. Reducing the number of expressions being watched makes the digest loop faster and allows more information to be displayed at the same time.

            &lt;h3>Exercise:&lt;/h3>

            Refer to our example and try to recreate them in our Code Editor.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="">
                    /tb1 <h4>Numbers</h4>
                    /tb1 <div ng-init="">
                    /tb2 <p></p>
                    /tb1 </div>

                    /tb1 <h4>Strings</h4>
                    /tb1 <div ng-init="">
                    /tb2 <p></p>
                    /tb1 </div>

                    /tb1 <h4>Objects</h4>
                    /tb1 <div ng-init="">
                    /tb2 <p></p>
                    /tb1 </div>

                    /tb1 <h4>Arrays</h4>
                    /tb1 <div ng-init="">
                    /tb2 <p></p>
                    /tb1 </div>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="">
                    /tb1 <h4>Numbers</h4>
                    /tb1 <div ng-init="quantity=1;cost=5"> 
                    /tb2 <p>Total: <span ng-bind="quantity * cost"></span></p>
                    /tb1 </div> 

                    /tb1 <h4>Strings</h4>
                    /tb1 <div ng-init="firstName='John';lastName='Doe'">
                    /tb2 <p>The name is {{ firstName + " " + lastName }}</p>
                    /tb1 </div>

                    /tb1 <h4>Objects</h4>
                    /tb1 <div ng-init="person={firstName:'John',lastName:'Doe'}">
                    /tb2 <p>The name is {{ person.firstName + " " + person.lastName }}</p>
                    /tb1 </div>
                      
                    /tb1 <h4>Arrays</h4>
                    /tb1 <div ng-init="points=[1,15,19,2,40]">
                    /tb2 <p>The third result is {{ points[2] }}</p>
                    /tb1 </div>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Modules
        </title>
        <content>
            Modules define AngularJS applications. You can think of a module as a container for the different
            parts of your app – controllers, services, filters, directives, etc.

            A module is created by using the AngularJS function angular.module()

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", []);
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Try to create the module of our app in the Code Editor to make it work.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h1>{{firstName}} {{lastName}}</h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    // Write your module here!

                    app.controller('myController', ['$scope', function ($scope) {
                    /tb1 $scope.firstName = 'John';
                    /tb1 $scope.lastName = 'Doe';
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h1>{{firstName}} {{lastName}}</h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function ($scope) {
                    /tb1 $scope.firstName = 'John';
                    /tb1 $scope.lastName = 'Doe';
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Controllers
        </title>
        <content>
            In Angular, a Controller is defined by a JavaScript constructor function that is used to augment the Angular Scope.

            When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function. A new child scope will be created and made available as an injectable parameter to the Controller's constructor function as $scope.

            &lt;h2>Use controllers to:&lt;/h2>

            Set up the initial state of the $scope object.
            Add behavior to the $scope object.

            &lt;h2>Do not use controllers to:&lt;/h2>

            &lt;strong>Manipulate DOM&lt;/strong> — Controllers should contain only business logic. Putting any presentation logic into Controllers significantly
            affects its testability. Angular has databinding for most cases and directives to encapsulate manual DOM manipulation.
            &lt;strong>Format input&lt;/strong> — Use angular form controls instead.
            &lt;strong>Filter output&lt;/strong> — Use angular filters instead.
            &lt;strong>Share code or state across controllers&lt;/strong> — Use angular services instead.
            &lt;strong>Manage the life-cycle of other components&lt;/strong> (for example, to create service instances).

            The &lt;strong>ng-controller&lt;/strong> directive defines the application controller.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="myApp" ng-controller="myController">
                /nl
                /tb1 First Name: /ltinput type="text" ng-model="firstName">/ltbr>
                /tb1 Last Name: /ltinput type="text" ng-model="lastName">/ltbr>
                /tb1 /ltbr>
                /tb1 Full Name: {{firstName + " " + lastName}}
                /nl
                /lt/div>
                /nl
                /ltscript>
                /tb1 var app = angular.module('myApp', []);
                /tb1 app.controller('myController', function($scope) {
                /tb2 $scope.firstName = "John";
                /tb2 $scope.lastName = "Doe";
                /tb1 });
                /lt/script>
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Create your own controller and supply a value for each scope so that the expressions in the View will output a value.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="">
                    /tb1 <h1>{{scopeOne}}</h1>
                    /tb1 <h1>{{scopeTwo}}</h1>
                    /tb1 <h1>{{scopeThree}}</h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);
                    
                    // Write your Controller here!
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h1>scopeOne: {{scopeOne}}</h1>
                    /tb1 <h1>scopeTwo: {{scopeTwo}}</h1>
                    /tb1 <h1>scopeThree: {{scopeThree.name + " " + scopeThree.age}}</h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);
                    
                    app.controller('myController', ['$scope', function($scope) {
                    /tb1 $scope.scopeOne = 'John Doe';
                    /tb1 $scope.scopeTwo = 42;
                    /tb1 $scope.scopeThree = {'name':'John','age':42};
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Scopes
        </title>
        <content>
            Scope is an object that refers to the application model. It is an execution context for expressions.
            Scope is the binding part between the HTML (view) and the JavaScript (controller).
            Scope is available for both the view and the controller.

            When you make a controller in AngularJS, you pass the $scope object as an argument.

            &lt;h2>Understanding the Scope&lt;/h2>

            If we consider an AngularJS application to consist of:

            View, which is the HTML.
            Model, which is the data available for the current view.
            Controller, which is the JavaScript function that makes, changes, removes, or controls the data.
            Then the scope is the Model.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="myApp" ng-controller="myCtrl">
                /nl
                /tb1 /lth1>{{carname}}/lt/h1>
                /nl
                /lt/div>
                /nl
                /ltscript>
                /tb1 var app = angular.module('myApp', []);
                /nl
                /tb1 app.controller('myCtrl', function($scope) {
                /tb2 $scope.carname = "Volvo";
                /tb1 });
                /lt/script>
            &lt;/code>&lt;/pre>
            &lt;h2>Root Scope&lt;/h2>

            All applications have a $rootScope which is the scope created on the HTML element that contains the ng-app directive.

            The rootScope is available in the entire application.

            &lt;h3>Exercise:&lt;/h3>

            Create atleast three scopes in the controller and output them in the View using Expressions.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    <!-- Write your Expressions here! -->
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function ($scope) {
                    // Write your scopes here!
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h3>{{carOne}}</h3>
                    /tb1 <h3>{{carTwo}}</h3>
                    /tb1 <h3>{{carThree}}</h3>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function ($scope) {
                    /tb1 $scope.carOne = 'Volvo';
                    /tb1 $scope.carTwo = 'Audi';
                    /tb1 $scope.carThree = 'Mercedes';
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Beginner
        </level>
        <title>
            Data Binding
        </title>
        <content>
            Data-binding in Angular apps is the automatic synchronization of data between the model and view components.
            The way that Angular implements data-binding lets you treat the model as the single-source-of-truth in your application.
            The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.

            &lt;h2>Data Model&lt;/h2>

            AngularJS applications usually have a data model. The data model is a collection of data available for the application.
        
            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module('myApp', []);
                app.controller('myCtrl', function($scope) {
                /tb1 $scope.firstname = "John";
                /tb1 $scope.lastname = "Doe";
                });
            &lt;/code>&lt;/pre>
            &lt;h2>HTML View&lt;/h2>

            The HTML container where the AngularJS application is displayed, is called the view.

            The view has access to the model, and there are several ways of displaying model data in the view.

            You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property:

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltp ng-bind="firstname">/lt/p>
            &lt;/code>&lt;/pre>
            You can also use double braces {{ }} to display content from the model:

            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltp>First name: {{firstname}}/lt/p>
            &lt;/code>&lt;/pre>
            Or you can use the ng-model directive on HTML controls to bind the model to the view.

            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltinput ng-model="firstname">
            &lt;/code>&lt;/pre>
            The ng-model directive provides a two-way binding between the model and the view.

            &lt;h2>Two-way Binding&lt;/h2>

            Data binding in AngularJS is the synchronization between the model and the view.

            When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well.
            This happens immediately and automatically, which makes sure that the model and the view is updated at all times.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="myApp" ng-controller="myCtrl">
                /tb1 Name: /ltinput ng-model="firstname">
                /tb1 /lth1>{{firstname}}/lt/h1>
                /lt/div>
                /nl
                /ltscript>
                /tb1 var app = angular.module('myApp', []);
                /tb1 app.controller('myCtrl', function($scope) {
                /tb2 $scope.firstname = "John";
                /tb2 $scope.lastname = "Doe";
                /tb1 });
                /lt/script>
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Refer on our examples then create your own Two-way Binding.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myCtrl">
                    /tb1 <!-- -->
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myCtrl', function($scope) {
                    /tb1 //
                    });
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myCtrl">
                    /tb1 Name: <input ng-model="firstname">
                    /tb1 <h1>{{firstname}}</h1>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myCtrl', function($scope) {
                    /tb1 $scope.firstname = 'John';
                    /tb1 $scope.lastname = 'Doe';
                    });
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Intermediate
        </level>
        <title>
            Services
        </title>
        <content>
            Angular services are substitutable objects that are wired together using dependency injection (DI).
            You can use services to organize and share code across your app.

            &lt;h2>Angular services are:&lt;/h2>

            &lt;strong>Lazily instantiated&lt;/strong> – Angular only instantiates a service when an application component depends on it.
            &lt;strong>Singletons&lt;/strong> – Each component dependent on a service gets a reference to the single instance generated by the service factory.
            Angular offers several useful services (like $http), but for most applications you'll also want to create your own.

            To use an Angular service, you add it as a dependency for the component (controller, service, filter or directive) that depends on the service.
            Angular's dependency injection subsystem takes care of the rest.
        
            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                app.controller('myCtrl', function($scope, MyService, PromiseService) {
                /tb1 $scope.myCustomService = MyService.myFunc();
                /nl
                /tb1 PromiseService.getDetails().then(function (response) {
                /tb2 $scope.details = response.data;
                /tb1 });
                });
            &lt;/code>&lt;/pre>
            You can create your own custom service using the angular service() function.

            &lt;h3>Exercise:&lt;/h3>

            1. On our code editor we have a service that convert your input to Uppercase. Make another service that convert your input to Lowercase. Don't forget to add it on your Controller.

            2. Notice we have another service in our example called AnotherService. It returns a JSON object as a promise so you will need to use then() function. Use this service and bind its response to the scope then use ng-repeat in our View to show only the names.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h4>Service Example</h4>
                    /tb1 <input ng-model="myInput" ng-change="toUpperCaseFunction(myInput)">
                    /tb1 <h2>{{myOutput}}</h2>

                    /tb1 <h4>Exercise 1</h4>
                    /tb1 <!-- Write here! -->
                    /tb1 <h4>Exercise 2</h4>
                    /tb1 <!-- Write here! -->
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.service('MyService', function() {
                    /tb1 this.myFunction = function (data) {
                    /tb2 return data.toUpperCase();
                    /tb1 };
                    });

                    app.service('AnotherService', ['$http', function($http) {
                    /tb1 this.getDetails = function () {
                    /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&format=json');
                    /tb1 };
                    }]);

                    app.controller('myController', ['$scope', 'MyService', function($scope, MyService) {
                    /tb1 $scope.toUpperCaseFunction = function(data) {
                    /tb2 $scope.myOutput = MyService.myFunction(data);
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <h4>Service Example</h4>
                    /tb1 <div>Uppercase: <input ng-model="myInput" ng-change="toUpperCaseFunction(myInput)"></div><br />
                    /tb1 <h2>{{myOutput}}</h2>

                    /tb1 <h4>Exercise 1</h4>
                    /tb1 <div>Lowercase: <input ng-model="lowercaseInput" ng-change="toLowerCaseFunction(lowercaseInput)"></div>
                    /tb1 <h2>{{lowercaseOutput}}</h2>

                    /tb1 <h4>Exercise 2</h4>
                    /tb1 <h3 ng-repeat="details in list">{{details.nm}}</h3>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.service('MyService', function() {
                    /tb1 this.myFunction = function (data) {
                    /tb2 return data.toUpperCase();
                    /tb1 };
                    });

                    app.service('ToLowerCaseService', function() {
                    /tb1 this.myFunction = function (data) {
                    /tb2 return data.toLowerCase();
                    /tb1 };
                    });

                    app.service('AnotherService', ['$http', function($http) {
                    /tb1 this.getDetails = function () {
                    /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&format=json');
                    /tb1 };
                    }]);

                    app.controller('myController', ['$scope', 'MyService', 'ToLowerCaseService', 'AnotherService', function($scope, MyService, ToLowerCaseService, AnotherService) {
                    /tb1 $scope.toUpperCaseFunction = function(data) {
                    /tb2 $scope.myOutput = MyService.myFunction(data);
                    /tb1 };
                    /tb1 $scope.toLowerCaseFunction = function(data) {
                    /tb2 $scope.lowercaseOutput = ToLowerCaseService.myFunction(data);
                    /tb1 };
                    /tb1 AnotherService.getDetails()
                    /tb2 .then(function (response) {
                    /tb3 $scope.list = response.data;
                    /tb2 });
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Intermediate
        </level>
        <title>
            Dependency Injection
        </title>
        <content>
            Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.

            The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.

            &lt;h2>Dependency Annotation&lt;/h2>

            Angular invokes certain functions (like service factories and controllers) via the injector. You need to annotate these functions so that the injector knows what services to inject into the function. There are three ways of annotating your code with service name information:

            Using the inline array annotation (preferred)
            Using the $inject property annotation
            Implicitly from the function parameter names (has caveats)

            &lt;h2>Inline Array Annotation&lt;/h2>

            This is the preferred way to annotate application components. This is how the examples in the documentation are written.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                someModule.controller('MyController', ['$scope', 'greeter', function($scope, greeter) {
                /tb1 // ...
                }]);
            &lt;/code>&lt;/pre>
            Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.

            When using this type of annotation, take care to keep the annotation array in sync with the parameters in the function declaration.

            &lt;h2>$inject Property Annotation&lt;/h2>
            
            To allow the minifiers to rename the function parameters and still be able to inject the right services, the function needs to be annotated with the $inject property. The $inject property is an array of service names to inject.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var MyController = function($scope, greeter) {
                /tb1 // ...
                }
                /nl
                MyController.$inject = ['$scope', 'greeter'];
                /nl
                someModule.controller('MyController', MyController);
            &lt;/code>&lt;/pre>
            In this scenario the ordering of the values in the $inject array must match the ordering of the parameters in MyController.

            Just like with the array annotation, you'll need to take care to keep the $inject in sync with the parameters in the function declaration.

            &lt;h2>Implicit Annotation&lt;/h2>

            The simplest way to get hold of the dependencies is to assume that the function parameter names are the names of the dependencies.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                someModule.controller('MyController', function($scope, greeter) {
                /tb1 // ...
                });
            &lt;/code>&lt;/pre>
            Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, $scope and greeter are two services which need to be injected into the function.

            One advantage of this approach is that there's no array of names to keep in sync with the function parameters. You can also freely reorder dependencies.

            However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.

            Tools like ng-annotate let you use implicit dependency annotations in your app and automatically add inline array annotations prior to minifying. If you decide to take this approach, you probably want to use ng-strict-di.

            Because of these caveats, we recommend avoiding this style of annotation.

            &lt;h3>Exercise:&lt;/h3>

            Supply the needed dependency on the controller in order for the app to work.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 Input first Number: <input ng-model="a"><br />
                    /tb1 Input second Number: <input ng-model="b"><br />
                    /tb1 <button ng-click="compute(a, b)">Compute</button><br />
                    /tb1 <h3>Sum is: {{sum}}</h3>
                    /tb1 <h3>Difference is: {{difference}}</h3>
                    /tb1 <h3>Product is: {{product}}</h3>
                    /tb1 <h3>Quotient is: {{quotient}}</h3>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', [function() {
                    /tb1 $scope.compute = function(a, b) {
                    /tb2 $scope.sum = ComputeService.getSum(a, b);
                    /tb2 $scope.difference = ComputeService.getDifference(a, b);
                    /tb2 $scope.product = ComputeService.getProduct(a, b);
                    /tb2 $scope.quotient = ComputeService.getQuotient(a, b);
                    /tb1 };
                    }]);

                    app.service('ComputeService', [function() {
                    /tb1 this.getSum = function (a,b) {
                    /tb2 return parseFloat(a) + parseFloat(b);
                    /tb1 };
                    /tb1 this.getDifference = function (a,b) {
                    /tb2 return a - b;
                    /tb1 };
                    /tb1 this.getProduct = function (a,b) {
                    /tb2 return a * b;
                    /tb1 };
                    /tb1 this.getQuotient = function (a,b) {
                    /tb2 return a / b;
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 Input first Number: <input ng-model="a"><br />
                    /tb1 Input second Number: <input ng-model="b"><br />
                    /tb1 <button ng-click="compute(a, b)">Compute</button><br />
                    /tb1 <h3>Sum is: {{sum}}</h3>
                    /tb1 <h3>Difference is: {{difference}}</h3>
                    /tb1 <h3>Product is: {{product}}</h3>
                    /tb1 <h3>Quotient is: {{quotient}}</h3>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', 'ComputeService', function($scope, ComputeService) {
                    /tb1 $scope.compute = function(a, b) {
                    /tb2 $scope.sum = ComputeService.getSum(a, b);
                    /tb2 $scope.difference = ComputeService.getDifference(a, b);
                    /tb2 $scope.product = ComputeService.getProduct(a, b);
                    /tb2 $scope.quotient = ComputeService.getQuotient(a, b);
                    /tb1 };
                    }]);

                    app.service('ComputeService', [function() {
                    /tb1 this.getSum = function (a,b) {
                    /tb2 return parseFloat(a) + parseFloat(b);
                    /tb1 };
                    /tb1 this.getDifference = function (a,b) {
                    /tb2 return a - b;
                    /tb1 };
                    /tb1 this.getProduct = function (a,b) {
                    /tb2 return a * b;
                    /tb1 };
                    /tb1 this.getQuotient = function (a,b) {
                    /tb2 return a / b;
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Intermediate
        </level>
        <title>
            Filters
        </title>
        <content>
            Filters format the value of an expression for display to the user. They can be used in view templates, controllers or services.
            Angular comes with a collection of built-in filters, but it is easy to define your own as well.

            &lt;h2>Adding Filters to Expressions&lt;/h2>

            Filters can be added to expressions by using the pipe character |, followed by a filter.

            The uppercase filter format strings to upper case:

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="myApp" ng-controller="personCtrl">
                /nl
                /tb1 /ltp>The name is {{ lastName | uppercase }}/lt/p>
                /nl
                /lt/div>
            &lt;/code>&lt;/pre>
            &lt;h2>Adding Filters to Directives&lt;/h2>.

            Filters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter:

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="myApp" ng-controller="namesCtrl">
                /tb1 /ltul>
                /tb2 /ltli ng-repeat="x in names | orderBy:'country'">
                /tb3 {{ x.name + ', ' + x.country }}
                /tb2 /lt/li>
                /tb1 /lt/ul>
                /lt/div>
            &lt;/code>&lt;/pre>
            You can create your own custom filter using the angular filter() function.

            &lt;h3>Exercise:&lt;/h3>

            1. See our example in the Code Editor. Use Uppercase filter on the first Expression and Lowercase filter on the other Expression.

            2. On our second example you need to supply the correct Directive filter so that the names will be filtered based on what you type on the text input.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <!-- Expression filters -->
                    /tb1 <h3>Exercise 1</h3>
                    /tb1 <p>Uppercase: {{ name }}</p>
                    /tb1 <p>Lowercase: {{ name }}</p>

                    /tb1 <!-- Directive filters -->
                    /tb1 <h3>Exercise 2</h3>
                    /tb1 <input type="text" ng-model="test">
                    /tb1 <h2 ng-repeat="x in details">{{x.nm}}</h2>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', 'AnotherService', function ($scope, AnotherService) {
                    /tb1 $scope.name = 'John Doe';
                    /tb1 AnotherService.getDetails().then(function (response) {
                    /tb2 $scope.details = response.data;
                    /tb1 });
                    }]);

                    app.service('AnotherService', ['$http', function($http) {
                    /tb1 this.getDetails = function () {
                    /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&format=json');
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <!-- Expression filters -->
                    /tb1 <h3>Exercise 1</h3>
                    /tb1 <p>Uppercase: {{ name | uppercase}}</p>
                    /tb1 <p>Lowercase: {{ name | lowercase}}</p>

                    /tb1 <!-- Directive filters -->
                    /tb1 <h3>Exercise 2</h3>
                    /tb1 <input type="text" ng-model="test">
                    /tb1 <h2 ng-repeat="x in details | filter : test">{{x.nm}}</h2>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', 'AnotherService', function ($scope, AnotherService) {
                    /tb1 $scope.name = 'John Doe';
                    /tb1 AnotherService.getDetails().then(function (response) {
                    /tb2 $scope.details = response.data;
                    /tb1 });
                    }]);

                    app.service('AnotherService', ['$http', function($http) {
                    /tb1 this.getDetails = function () {
                    /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&format=json');
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Intermediate
        </level>
        <title>
            Forms
        </title>
        <content>
            Controls (input, select, textarea) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.

            Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error.

            Server-side validation is still necessary for a secure application.

            &lt;h2>Simple form&lt;/h2>

            The key directive in understanding two-way data-binding is ngModel. The ngModel directive provides the two-way data-binding by synchronizing the model to the view, as well as view to the model.
        
            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="formExample" ng-controller="ExampleController">
                /tb1 /ltform novalidate class="simple-form">
                /tb2 Name: /ltinput type="text" ng-model="user.name" />/ltbr />
                /tb2 Gender: /ltinput type="radio" ng-model="user.gender" value="male" />male
                /tb2 /ltinput type="radio" ng-model="user.gender" value="female" />female/ltbr />
                /tb2 /ltinput type="button" ng-click="reset()" value="Reset" />
                /tb2 /ltinput type="submit" ng-click="update(user)" value="Save" />
                /tb1 /lt/form>
                /tb1 /ltpre>user = {{user | json}}/lt/pre>
                /tb1 /ltpre>master = {{master | json}}/lt/pre>
                /lt/div>
                /nl
                /ltscript>
                /tb1 angular.module('formExample', [])
                /tb2 .controller('ExampleController', ['$scope', function($scope) {
                /tb3 $scope.master = {};
                /nl
                /tb3 $scope.update = function(user) {
                /tb4 $scope.master = angular.copy(user);
                /tb3 };
                /nl
                /tb3 $scope.reset = function() {
                /tb4 $scope.user = angular.copy($scope.master);
                /tb3 };
                /nl
                /tb3 $scope.reset();
                /tb1 }]);
                /lt/script>
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Try to recreate the example form and make it work. Also add two new functions namely Delete and Insert. The Delete Function will just delete the content of the user and master Scope. While the Insert function will automatically insert a name and gender value.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="formExample" ng-controller="ExampleController">
                    /tb1 <form novalidate class="simple-form">
                    /tb2 Name: <input type="text" ng-model="user.name" /><br />
                    /tb2 Gender: <input type="radio" ng-model="user.gender" value="male" />male
                    /tb3 <input type="radio" ng-model="user.gender" value="female" />female<br />
                    /tb2 <input type="button" ng-click="reset()" value="Reset" />
                    /tb2 <input type="submit" ng-click="update(user)" value="Save" />
                    /tb1 </form>
                        
                    /tb1 <pre>user = {{user | json}}</pre>
                    /tb1 <pre>master = {{master | json}}</pre>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    angular.module('formExample', [])
                    /tb1 .controller('ExampleController', ['$scope', function($scope) {
                    /tb1 }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="formExample" ng-controller="ExampleController">
                    /tb1 <form novalidate class="simple-form">
                    /tb2 Name: <input type="text" ng-model="user.name" /><br />
                    /tb2 Gender: <input type="radio" ng-model="user.gender" value="male" />male
                    /tb3 <input type="radio" ng-model="user.gender" value="female" />female<br />
                    /tb2 <input type="button" ng-click="reset()" value="Reset" />
                    /tb2 <input type="button" ng-click="delete()" value="Delete" />
                    /tb2 <input type="button" ng-click="insert()" value="Insert" />
                    /tb2 <input type="submit" ng-click="update(user)" value="Save" />
                    /tb1 </form>
                        
                    /tb1 <pre>user = {{user | json}}</pre>
                    /tb1 <pre>master = {{master | json}}</pre>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    angular.module('formExample', [])
                    /tb1 .controller('ExampleController', ['$scope', function($scope) {
                    /tb2 $scope.master = {};
                    /tb2 $scope.update = function(user) {
                    /tb3 $scope.master = angular.copy(user);
                    /tb2 };
                    /tb2 $scope.reset = function() {
                    /tb3 $scope.user = angular.copy($scope.master);
                    /tb2 };
                    /tb2 $scope.delete = function() {
                    /tb3 $scope.user = {};
                    /tb3 $scope.master = {};
                    /tb2 };
                    /tb2 $scope.insert = function() {
                    /tb3 $scope.user.name = 'Mark';
                    /tb3 $scope.user.gender = 'male';
                    /tb2 };
                    /tb2 $scope.reset();
                    /tb1 }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Intermediate
        </level>
        <title>
            Routing
        </title>
        <content>
            If you want to navigate to different pages in your application, but you also want the application to be a SPA (Single Page Application), with no page reloading, you can use the ngRoute module.

            The ngRoute module routes your application to different pages without reloading the entire application.

            The ngRoute module helps your application to become a Single Page Application.
        
            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltbody ng-app="myApp">
                /nl
                /ltp>/lta href="#/">Main/lt/a>/lt/p>
                /nl
                /lta href="#red">Red/lt/a>
                /lta href="#green">Green/lt/a>
                /lta href="#blue">Blue/lt/a>
                /nl
                /ltdiv ng-view>/lt/div>
                /nl
                /ltscript>
                /tb1 var app = angular.module("myApp", ["ngRoute"]);
                /tb2 app.config(function($routeProvider) {
                /tb3 $routeProvider
                /tb4 .when("/", {
                /tb4/tb1 templateUrl : "main.htm"
                /tb4 })
                /tb4 .when("/red", {
                /tb4/tb1 templateUrl : "red.htm"
                /tb4 })
                /tb4 .when("/green", {
                /tb4/tb1 templateUrl : "green.htm"
                /tb4 })
                /tb4 .when("/blue", {
                /tb4/tb1 templateUrl : "blue.htm"
                /tb4 });
                /tb2 });
                /lt/script>
            &lt;/code>&lt;/pre>
            To make your applications ready for routing, you must include the AngularJS Route module:

            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltscript src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-route.js">/lt/script>
            &lt;/code>&lt;/pre>
            Then you must add the ngRoute as a dependency in the application module::

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", ["ngRoute"]);
            &lt;/code>&lt;/pre>
            Now your application has access to the route module, which provides the $routeProvider.

            Use the $routeProvider to configure different routes in your application:

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                app.config(function($routeProvider) {
                /tb1 $routeProvider
                /tb2 .when("/", {
                /tb3 templateUrl : "main.htm"
                /tb2 })
                /tb2 .when("/red", {
                /tb3 templateUrl : "red.htm"
                /tb2 })
                /tb2 .when("/green", {
                /tb3 templateUrl : "green.htm"
                /tb2 })
                /tb2 .when("/blue", {
                /tb3 templateUrl : "blue.htm"
                /tb2 });
                });
            &lt;/code>&lt;/pre>
            &lt;h2>ngView&lt;/h2>

            Your application needs a container to put the content provided by the routing.

            This container is the ng-view directive.

            There are three different ways to include the ng-view directive in your application:

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-view>/lt/div>
                /nl
                /ltng-view>/lt/ng-view>
                /nl
                /ltdiv class="ng-view">/lt/div>
            &lt;/code>&lt;/pre>            
            &lt;h2>$routeProvider&lt;/h2>.

            With the $routeProvider you can define what page to display when a user clicks a link.

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", ["ngRoute"]);
                app.config(function($routeProvider) {
                /tb1 $routeProvider
                /tb2 .when("/", {
                /tb3 templateUrl : "main.htm"
                /tb2 })
                /tb2 .when("/london", {
                /tb3 templateUrl : "london.htm"
                /tb2 })
                /tb2 .when("/paris", {
                /tb3 templateUrl : "paris.htm"
                /tb2 });
                });
            &lt;/code>&lt;/pre>
            Define the $routeProvider using the config method of your application. Work registered in the config method will be performed when the application is loading.

            &lt;h2>Controllers&lt;/h2>

            With the $routeProvider you can also define a controller for each "view".

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", ["ngRoute"]);
                /nl
                app.config(function($routeProvider) {
                /tb1 $routeProvider
                /tb2 .when("/", {
                /tb3 templateUrl : "main.htm"
                /tb2 })
                /tb2 .when("/london", {
                /tb3 templateUrl : "london.htm",
                /tb3 controller : "londonCtrl"
                /tb2 })
                /tb2 .when("/paris", {
                /tb3 templateUrl : "paris.htm",
                /tb3 controller : "parisCtrl"
                /tb2 });
                });
                /nl
                app.controller("londonCtrl", function ($scope) {
                /tb1 $scope.msg = "I love London";
                });
                /nl
                app.controller("parisCtrl", function ($scope) {
                /tb1 $scope.msg = "I love Paris";
                });
            &lt;/code>&lt;/pre>
            &lt;h2>Template&lt;/h2>

            In the previous examples we have used the templateUrl property in the $routeProvider.when method.

            You can also use the template property, which allows you to write HTML directly in the property value, and not refer to a page.

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", ["ngRoute"]);
                app.config(function($routeProvider) {
                /tb1 $routeProvider
                /tb2 .when("/", {
                /tb3 template : "/lth1>Main/lt/h1>/ltp>Click on the links to change this content/lt/p>"
                /tb2 })
                /tb2 .when("/banana", {
                /tb3 template : "/lth1>Banana/lt/h1>/ltp>Bananas contain around 75% water./lt/p>"
                /tb2 })
                /tb2 .when("/tomato", {
                /tb3 template : "/lth1>Tomato/lt/h1>/ltp>Tomatoes contain around 95% water./lt/p>"
                /tb2 });
                });
            &lt;/code>&lt;/pre>
            &lt;h2>The otherwise method&lt;/h2>

            In the previous examples we have used the when method of the $routeProvider.

            You can also use the otherwise method, which is the default route when none of the others get a match.

            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module("myApp", ["ngRoute"]);
                app.config(function($routeProvider) {
                /tb1 $routeProvider
                /tb2 .when("/banana", {
                /tb3 template : "/lth1>Banana/lt/h1>/ltp>Bananas contain around 75% water./lt/p>"
                /tb2 })
                /tb2 .when("/tomato", {
                /tb3 template : "/lth1>Tomato/lt/h1>/ltp>Tomatoes contain around 95% water./lt/p>"
                /tb2 })
                /tb2 .otherwise({
                /tb3 template : "/lth1>None/lt/h1>/ltp>Nothing has been selected,/lt/p>"
                /tb2 });
                });
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Create your own Routing with at least three routes. You can just use Template instead of TemplateUrl. Also use the Otherwise method. Don't forget to add ngRoute to your module.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp">
                    /tb1 <p><a href="#/">Main</a></p> 
                    /tb1 <a href="#route1">Route 1</a>
                    /tb1 <a href="#route2">Route 2</a>
                    /tb1 <a href="#route3">Route 3</a>
                        
                    /tb1 <div ng-view></div>
                    </div> 
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp">
                    /tb1 <p><a href="#/">Main</a></p> 
                    /tb1 <a href="#route1">Route 1</a>
                    /tb1 <a href="#route2">Route 2</a>
                    /tb1 <a href="#route3">Route 3</a>
                        
                    /tb1 <div ng-view></div>
                    </div> 
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', ['ngRoute']);

                    app.config(function($routeProvider) {
                    /tb1 $routeProvider
                    /tb2 .when('/', {
                    /tb3 template : '<h1>Main</h1><p>Select a route</p>'
                    /tb2 }).when('/route1', {
                    /tb3 template : '<h1>Route 1</h1><p>You are in route 1</p>'
                    /tb2 }).when('/route2', {
                    /tb3 template : '<h1>Route 2</h1><p>Now in route 2</p>'
                    /tb2 }).when('/route3', {
                    /tb3 template : '<h1>Route 3</h1><p>Currently in route 3</p>'
                    /tb2 }).otherwise({
                    /tb3 template : '<h1>None</h1><p>Nothing has been selected</p>'
                    /tb2 });
                    });
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Advanced
        </level>
        <title>
            Custom Directives
        </title>
        <content>
            In addition to all the built-in AngularJS directives, you can create your own directives.

            New directives are created by using the .directive function.

            To invoke the new directive, make an HTML element with the same tag name as the new directive.

            New directives are created by using the .directive() function.
            The restrict option is typically set to:
            'A' - only matches attribute name
            'E' - only matches element name
            'C' - only matches class name
            'M' - only matches comment

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltscript>
                /tb1 app.directive('myCustomDirective', function () {
                /tb2 return {
                /tb3 restrict: 'E', // Restriction for Element
                /tb3 replace: true, // If true, Replace the custom element with the template 
                /tb3 scope: {
                /tb4 list: '='
                /tb3 },
                /tb3 template: '/lta href="#" ng-repeat="x in list">{{x}}/lt/a>'
                /tb2 };
                /tb1 });
                /lt/script>

                /ltmy-custom-directive list="myList">/lt/my-custom-directive>
            &lt;/code>&lt;/pre>
            &lt;h3>Exercise:&lt;/h3>

            Create your own directive where you can use the object in our controller.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <!-- -->
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function($scope) {
                    /tb1 $scope.data = [
                    /tb2 {name:'John', age:25, gender:'boy'},
                    /tb2 {name:'Jessie', age:30, gender:'girl'},
                    /tb2 {name:'Johanna', age:28, gender:'girl'},
                    /tb2 {name:'Joy', age:15, gender:'girl'},
                    /tb2 {name:'Mary', age:28, gender:'girl'},
                    /tb2 {name:'Peter', age:95, gender:'boy'},
                    /tb2 {name:'Sebastian', age:50, gender:'boy'},
                    /tb2 {name:'Erika', age:27, gender:'girl'},
                    /tb2 {name:'Patrick', age:40, gender:'boy'},
                    /tb2 {name:'Samantha', age:60, gender:'girl'}
                    /tb1 ];
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <my-directive list="data"></my-directive>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);

                    app.controller('myController', ['$scope', function($scope) {
                    /tb1 $scope.data = [
                    /tb2 {name:'John', age:25, gender:'boy'},
                    /tb2 {name:'Jessie', age:30, gender:'girl'},
                    /tb2 {name:'Johanna', age:28, gender:'girl'},
                    /tb2 {name:'Joy', age:15, gender:'girl'},
                    /tb2 {name:'Mary', age:28, gender:'girl'},
                    /tb2 {name:'Peter', age:95, gender:'boy'},
                    /tb2 {name:'Sebastian', age:50, gender:'boy'},
                    /tb2 {name:'Erika', age:27, gender:'girl'},
                    /tb2 {name:'Patrick', age:40, gender:'boy'},
                    /tb2 {name:'Samantha', age:60, gender:'girl'}
                    /tb1 ];
                    }]);

                    app.directive('myDirective', [function () {
                    /tb1 return {
                    /tb2 restrict: 'E',
                    /tb2 replace: true,
                    /tb2 scope: {
                    /tb3 list: '='
                    /tb2 },
                    /tb2 template: '<div ng-repeat="x in list"><a href="#" ng-click="showDetails = !showDetails">{{x.name}}</a> <span ng-show="showDetails">Age: {{x.age}} Gender: {{x.gender}}</span></div>'
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Advanced
        </level>
        <title>
            Custom Filters
        </title>
        <content>
            You can make your own filters by registering a new filter factory function with your module.

            The filter function should be a pure function, which means that it should always return the same result given the same input arguments and should not affect external state, for example, other Angular services.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                var app = angular.module('myApp', []);
                app.filter('myFormat', function() {
                /tb1 return function(x) {
                /tb2 var i, c, txt = "";
                /tb2 for (i = 0; i /lt x.length; i++) {
                /tb3 c = x[i];
                /tb3 if (i % 2 === 0) {
                /tb4 c = c.toUpperCase();
                /tb3 }
                /tb3 txt += c;
                /tb2 }
                /tb2 return txt;
                /tb1 };
                });
            &lt;/code>&lt;/pre>
            The &lt;strong>myFormat&lt;/strong> filter will format every other character to uppercase.
            
            &lt;h3>Exercise:&lt;/h3>

            Create your own custom filter. You may refer to our example.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <!-- -->
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);
                    app.filter('myFilterName', function() {
                    /tb1 //
                    });
                    app.controller('myController', function($scope) {
                    /tb1 //
                    });
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="myApp" ng-controller="myController">
                    /tb1 <li ng-repeat="x in names">
                    /tb2 {{ x | myFormat }}
                    /tb1 </li>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('myApp', []);
                    app.filter('myFormat', function() {
                    /tb1 return function(x) {
                    /tb2 var i, c, txt = "";
                    /tb2 for (i = 0; i < x.length; i++) {
                    /tb3 c = x[i];
                    /tb3 if (i % 2 === 0) {
                    /tb4 c = c.toUpperCase();
                    /tb3 }
                    /tb3 txt += c;
                    /tb2 }
                    /tb2 return txt;
                    /tb1 };
                    });
                    app.controller('myController', function($scope) {
                    /tb1 $scope.names = ['Jani', 'Carl', 'Margareth', 'Hege', 'Joe', 'Gustav', 'Birgit', 'Mary', 'Kai'];
                    });
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </example>
    </chapter>
    <chapter>
        <level>
            Advanced
        </level>
        <title>
            Application
        </title>
        <content>
            Now you are ready to create your own AngularJS Application.

            Lets use some of the AngularJS features we've learn to make a simple application, were you can add, remove, or filter the names.

            Step 1:
            Make a div that will contain our app.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="finalExercise" ng-controller="MyController">
                /tb1 /lt!-- -->
                /lt/div>
            &lt;/code>&lt;/pre>
            Step 2:
            Make a Service that will return a JSON object. We will use it as data source.

            Use this link on you service:
            'http://mysafeinfo.com/api/data?list=englishmonarchs&amp;format=json'

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                app.service('MyService', ['$http', function($http) {
                /tb1 this.getDetails = function () {
                /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&amp;format=json');
                /tb1 };
                }]);
            &lt;/code>&lt;/pre>
            Step 3:
            In your Controller use your Service as a dependency so you can use its function inside your controller.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                app.controller('MyController', ['$scope', 'MyService', function($scope, MyService) {
                /tb1 //
                }]);
            &lt;/code>&lt;/pre>
            Step 4:
            Use your Service function inside your Controller to retrieve the its response.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                MyService.getDetails()
                /tb1 .then(function (response) {
                /tb2 var names = response.data;       
                /tb1 });
            &lt;/code>&lt;/pre>
            Step 5:
            We only need the names from the response so we will use a for loop and push the names into a $scope array.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                $scope.names = [];

                MyService.getDetails()
                /tb1 .then(function (response) {
                /tb2 var names = response.data;
                /tb2 for (var key in names) {
                /tb3 $scope.names.push(names[key].nm);
                /tb2 }
                /tb1 });
            &lt;/code>&lt;/pre>
            Step 6:
            Now that we bind it into a $scope we can now use ng-repeat to display the names into the view.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-app="finalExercise" ng-controller="MyController">
                /tb1 /ltdiv ng-repeat="name in names">{{name}}/lt/div>
                /lt/div>
            &lt;/code>&lt;/pre>
            Step 7:
            We will now add a search function using the filter Filter.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltinput type="text" ng-model="search" />

                /ltdiv ng-repeat="name in names | filter:search">{{name}}/lt/div>
            &lt;/code>&lt;/pre>
            In the example above we have an input that is bind using ng-model to the scope named search.

            Then on the ng-repeat it is used as a value of the filter.

            Step 8:
            Now we will make a function that can add names.

            Add this to your Controller.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                $scope.add = function () {
                /tb1 $scope.names.push($scope.name);
                };
            &lt;/code>&lt;/pre>
            Then in your HTML make an input and a button

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltinput type="text" ng-model="name" />
                /ltbutton ng-click="add()">Add/lt/button>
            &lt;/code>&lt;/pre>
            Step 9:
            Next we will create a remove names function.

            Add this code to your Controller.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-javascript" content-code prism>
                $scope.delete = function (index) {
                /tb1 $scope.names.splice(index, 1);
                };
            &lt;/code>&lt;/pre>
            Then add a button on your name div like the example below.

            &lt;label class="content-code-label bg-primary">Example&lt;/label>
            &lt;pre class="content-code">&lt;code class="language-html" content-code prism>
                /ltdiv ng-repeat="name in names | filter:search">
                /tb1 /ltspan>{{name}}/lt/span>
                /tb1 /ltbutton ng-click="delete($index)" ng-hide="search">Delete/lt/button>
                /lt/div>
            &lt;/code>&lt;/pre>
            The ng-click will call the delete function and will pass the $index of that name so the function will know what name it will delete.

            the ng-hide will just hide the button if you use the search function to prevent error because we don't have validations yet.

            And that is it for your first AngularJS Application.

            If you want you could add more functions or create custom directives and filters to it.
        </content>
        <code>
            <htmlcode>
                <![CDATA[
                    
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[

                 ]]>
            </stylecode>
        </code>
        <example>
            <htmlcode>
                <![CDATA[
                    <div ng-app="finalExercise" ng-controller="MyController">
                    /tb1 <form novalidate class="simple-form">
                    /tb2 Name: <input type="text" ng-model="name" />
                    /tb2 <input type="submit" ng-click="add()" value="Add" />
                    /tb2 <br /><br />
                    /tb2 Search: <input type="text" ng-model="search" />
                    /tb1 </form>
                    /tb1 <div ng-repeat="name in names | filter:search">
                    /tb2 <span>{{name}}</span> 
                    /tb2 <button ng-click="delete($index)" ng-hide="search">Delete</button>
                    /tb1 </div>
                    </div>
                ]]>
            </htmlcode>
            <scriptcode>
                <![CDATA[
                    var app = angular.module('finalExercise', []);

                    app.controller('MyController', ['$scope', 'MyService', function($scope, MyService) {
                    /tb1 $scope.names = [];
                    
                    /tb1 MyService.getDetails()
                    /tb2 .then(function (response) {
                    /tb3 var names = response.data;
                                
                    /tb3 for (var key in names) {
                    /tb4 $scope.names.push(names[key].nm);
                    /tb3 }
                    /tb2 });
                            
                    /tb1 $scope.add = function () {
                    /tb2 $scope.names.push($scope.name);  
                    /tb1 };
                        
                    /tb1 $scope.delete = function (index) {
                    /tb2 $scope.names.splice(index, 1);
                    /tb1 };
                    }]);

                    app.service('MyService', ['$http', function($http) {
                    /tb1 this.getDetails = function () {
                    /tb2 return $http.get('http://mysafeinfo.com/api/data?list=englishmonarchs&format=json');
                    /tb1 };
                    }]);
                 ]]>
            </scriptcode>
            <stylecode>
                <![CDATA[
                    span {
                    /tb1 display: inline-block;
                    /tb1 width: 200px;
                    }
                 ]]>
            </stylecode>
        </example>
    </chapter>
</lesson>